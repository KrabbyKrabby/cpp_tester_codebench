{
    "time_to_develop_prompt": "> 40",
    "programming_language": "C++",
    "task_type": "Enhancement",
    "difficulty": "3",
    "estimated_skill_requirements": "Data Structure and Algorithms,Library Feature",
    "user_prompt": "Base Code:\n```cpp\n\n#ifndef __MEM_ALLOC__\n#define __MEM_ALLOC__\n\n#include <windows.h>\n#include <iostream>\n#include <cstring>\n#include <mutex>\n\nclass MemoryManager {\npublic:\n    struct Header {\n        size_t size;\n        bool is_free;\n        Header* next;\n    };\n\nprivate:\n    static std::mutex mutex;\n    static Header* head;\n    static Header* tail;\n\n\npublic:\n    MemoryManager() = delete; // Disallow creating an instance\n\n    static void reset() {\n        std::lock_guard<std::mutex> lock(mutex);\n        head = nullptr;\n        tail = nullptr;\n        // Also consider releasing any allocated memory blocks if necessary\n    }\n\n    static void deallocate(void* block) {\n\n    }\n\n    static void* allocate(size_t size) {\n\n    }\n\n    static void* reallocate(void* block, size_t size) {\n\n    }\n\n    static void* zeroInitialize(size_t num, size_t size) {\n\n    }\n\nprivate:\n    static Header* getFreeBlock(size_t size) {\n        Header* curr = head;\n        while (curr) {\n            if (curr->is_free && curr->size >= size) {\n                return curr;\n            }\n            curr = curr->next;\n        }\n        return nullptr;\n    }\n};\n\n\n#endif //__MEM_ALLOC__\n```\n\n\nPrompt:\nCan you please enhance my MemoryManager class designed to manage dynamic memory allocations effectively in my application? Implement the placeholder methods in the class and return the class along with your code modifications. \n\nList of Functions to Implement:\n    1. Allocation Function: static void* allocate(size_t size); This method should allocate a block of memory of the specified size. It should return nullptr if the allocation fails.\n\n    2. Deallocation Function: static void deallocate(void* block); This method should free the specified block of memory.\n\n    3. Reallocation Function: static void* reallocate(void* block, size_t size); This function should reallocate a given memory block to a new size.\n\n    4. Zero Initialization: static void* zeroInitialize(size_t num, size_t size); This function should allocate and zero-initialize all bytes in the allocated block.\n"
}