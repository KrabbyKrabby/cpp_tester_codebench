{
    "time_to_develop_prompt": "30 -40",
    "programming_language": "C++",
    "task_type": "Bug Fix",
    "difficulty": "3",
    "estimated_skill_requirements": "Language-Specific Features,Library Feature",
    "user_prompt": "Base Code:\n```cpp\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <numeric>\n#include <iostream>\n\nint calculateMaxChannelQuality(std::vector<int> packetSizes, int numChannels) {\n    // Sort packet sizes in ascending order\n    std::sort(packetSizes.begin(), packetSizes.end());\n\n    // If packets are fewer or equal to channels, return the sum of all packets\n    if (packetSizes.size() <= numChannels) {\n        return std::accumulate(packetSizes.begin(), packetSizes.end(), 0);\n    }\n\n    float totalChannelQuality = 0;\n    int startIdx = packetSizes.size() - numChannels; \n\n    // Allocate the largest packets to channels as initial medians\n    for (int i = startIdx; i < packetSizes.size(); i++) {\n        totalChannelQuality += packetSizes[i];\n    }\n\n    int remainingPackets = startIdx;\n    int extraPairs = remainingPackets / numChannels;\n\n    // Add smaller packets to channels while maintaining quality\n    for (int i = 1; i <= extraPairs; i++) {\n        for (int j = 0; j < numChannels; j++) {\n            int leftIdx = (i - 1) * numChannels + j;\n            int rightIdx = remainingPackets - i * numChannels + j;\n            totalChannelQuality += (float)(packetSizes[leftIdx] + packetSizes[rightIdx]) / 2.0;\n        }\n    }\n\n    // Return the total quality rounded to the nearest integer\n    return std::round(totalChannelQuality);\n}\n```\n\nPrompt:\nIn a distributed system, packets of varying sizes need to be transmitted over a network of n channels. Each packet can only be assigned to one channel. The goal is to distribute the packets among the channels in such a way that the overall network quality is maximized. The quality of a channel is defined as the median size of the packets assigned to it. The total quality of the system is the sum of the medians of all channels. If the median is a decimal, it should be rounded to the nearest integer. The base code allocation of packets is not correct and provides wrong answers for all the cases. Don't change the function names and input structure. The output returned should be a single integer value. For example, if the total quality found is 7.5, it should be rounded to 8."
}