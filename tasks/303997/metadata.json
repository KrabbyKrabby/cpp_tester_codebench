{
    "time_to_develop_prompt": "> 40",
    "programming_language": "C++",
    "task_type": "Enhancement",
    "difficulty": "3",
    "estimated_skill_requirements": "Software Engineering Best Practices,Language-Specific Features,Library Feature",
    "user_prompt": "Base Code:\n```cpp\n#include <iostream>\n#include <string>\n\n// Function to add two integers\nint add(int a, int b) {\n    return a + b;\n}\n\n// Function to add two floats\nfloat add(float a, float b) {\n    return a + b;\n}\n\n// Function to add two doubles\ndouble add(double a, double b) {\n    return a + b;\n}\n\n// Function to concatenate two characters\nstd::string add(char a, char b) {\n    std::string result(1, a);\n    result += b;\n    return result;\n}\n\n// Function to concatenate two strings\nstd::string add(const std::string& a, const std::string& b) {\n    return a + b;\n}\n```\n\nPrompt:  \nEnhance the `add()` function by replacing all overloads with a single generalized template that supports the following operations:\n\nAllowed Operations:\n1. `char + char` \u2192 `std::string`  \n   - Example: `add('a', 'b') \u2192 \"ab\"`.\n\n2. Arithmetic + Arithmetic (`int`, `float`, `double`, etc.)  \n   - Example: `add(3, 3.14) \u2192 6.14` (follows standard type promotion).\n\n3. `char + int` (or vice versa) \u2192 ASCII sum (`int`)  \n   - Example: `add('A', 5) \u2192 70` (since `'A' == 65`).\n\n4. `char + std::string` (or vice versa) \u2192 Concatenation (`std::string`)  \n   - Example: `add('A', \"BC\") \u2192 \"ABC\"`.\n\n5. `std::string + std::string` \u2192 Concatenation (`std::string`)  \n   - Example: `add(\"Hello\", \"World\") \u2192 \"HelloWorld\"`.\n\n6. User-Defined Types (`T + U` valid via `operator+`)\n   - Example: If `T` and `U` define `operator+`, allow `add(T, U)`.\n\nUnsupported Operations \u2192 Runtime Exception\nAny operation not explicitly allowed should throw a `std::invalid_argument` exception.  \n\n- Example: `add(5, std::vector<int>{})` \u2192 throws `std::invalid_argument`.\n\nAdditional requirements:\n- C++17 Compatible: Use `if constexpr` and `std::enable_if` (avoid C++20 concepts).\n- Compile-Time Type Checking: Use a `can_add<T, U>` trait for user-defined types.\n- Runtime Safety: Throw `std::invalid_argument` exception for unsupported cases.\n\nExpected Implementation:\n- A single `add()` template function handling all cases.\n- Includes a helper trait (`can_add<T, U>`) to check `operator+`.\n- Uses a throw helper class (`UnsupportedOperationThrower`) to ensure correct compilation.\n- Avoids unnecessary conversions and copies.\n\nProvide a complete implementation with no extra overloads and include all necessary imports."
}