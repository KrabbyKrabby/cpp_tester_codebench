{
    "time_to_develop_prompt": "> 40",
    "programming_language": "C++",
    "task_type": "Completion",
    "difficulty": "3",
    "estimated_skill_requirements": "Language-Specific Features",
    "user_prompt": "Base Code:\n```cpp\n#include <vector>\n#include <iostream>\n\nint calculateMaxChannelQuality(std::vector<int> packetSizes, int numChannels) {\n    // Provide code here\n}\n```\n\nPrompt:\nIn a distributed system, packets of varying sizes need to be transmitted across a network of `n` channels. Each packet can only be assigned to a single channel. The goal is to distribute the packets among the channels in a way that maximizes the overall network quality. The quality of a channel is determined by the median size of the packets assigned to it. The total quality of the system is the sum of the medians of all channels. The function should return a single integer value. For instance, if the total quality is calculated as 7.5, it should be rounded to 8.\n\nThe median of a set of numbers is the middle value when the numbers are sorted in ascending order. If there is an odd number of elements, the median is the middle one. If there is an even number of elements, the median is the average of the two middle values.\n\nFor this task, the median calculated for each channel is not rounded off, but the final total quality is rounded to the nearest integer.\nConstraints:\n1. Each channel must receive at least one packet.\n2. If the number of packets is less than the number of channels, the function should throw an `invalid_argument` exception.\n3. If the packet vector is empty or the number of channels is 0, the function should return `0`.\n\nComplete the `calculateMaxChannelQuality()` function. The time complexity should be at most O(n log n), where n is the size of the `packetSizes` vector. Provide the complete function along with any necessary header files, but do not include the `int main()` function."
}