{
    "time_to_develop_prompt": "20 - 30",
    "programming_language": "C++",
    "task_type": "Completion",
    "difficulty": "3",
    "estimated_skill_requirements": "Language-Specific Features,Software Engineering Best Practices,Knowledge of a Specialized Software Area",
    "user_prompt": "Base Code:\n```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <unordered_map>\n#include <climits>\n\n// Structure to represent an edge in the graph\nstruct Edge {\n    int destination;   // Destination node index\n    int capacity;      // Edge capacity\n    int reverseIndex;  // Index of the reverse edge\n};\n\n// Class to represent the flow network\nclass FlowNetwork {\npublic:\n    FlowNetwork(int numNodes) : numNodes(numNodes), graph(numNodes) {}\n\n    // Function to add an edge to the graph\n    void addEdge(int source, int destination, int capacity) {\n      //ToDo: Implementation\n    }\n\n    // Function to find an augmenting path using BFS\n    bool findAugmentingPath(int source, int sink, std::unordered_map<int, int>& parent) {       \n       //ToDO: Implement findAugmentingPath algorithm\n    }\n\n    // Function to calculate the maximum flow using the Ford-Fulkerson method\n    int edmondsKarp(int source, int sink) {\n    //TODO:  Implement edmondsKarp algorithm\n    }\n\n    // Function to visualize the graph\n    void visualizeGraph() {\n    //TODO: Implement  visualizeGraph function\n    }\n\nprivate:\n    int numNodes;                          // Number of nodes in the graph\n    std::vector<std::vector<Edge>> graph; // Adjacency list representation of the graph\n};\n```\n\nPrompt: A network engineer needs to assess the reliability of a communication network with multiple nodes and connections. They decide to use C++ to implement a maximum flow algorithm to determine the optimal flow of data through the network. How can they structure their C++ code to model the network as a graph and apply the Ford-Fulkerson method to find the maximum flow, ensuring that the solution is efficient and scalable for larger networks?  Use same function and class names. "
}