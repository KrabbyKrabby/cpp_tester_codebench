{
    "time_to_develop_prompt": "> 40",
    "programming_language": "C++",
    "task_type": "Enhancement",
    "difficulty": "3",
    "estimated_skill_requirements": "Data Structure and Algorithms,Knowledge of a Specialized Software Area",
    "user_prompt": "Base Code:\n```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <unordered_set>\n#include <stdexcept>\n\nclass FileSystem {\nprivate:\n    std::unordered_set<std::string> filePaths;\n\npublic:\n    // Adds a file path to the system filePaths\n    void addFilePath(const std::string& path) {\n        if (path.empty() || path[0] != '/') {\n            throw std::invalid_argument(\"File path must start with '/' and cannot be empty\");\n        }\n        filePaths.insert(path);\n    }\n\n    // Checks if a file path exists\n    bool filePathExists(const std::string& path) const {\n        return filePaths.find(path) != filePaths.end();\n    }\n};\n``` \n\nPrompt:\nEnhance the FileSystem class to support the following functionalities:\n\n1. Normalize File Paths: Implement a function std::string normalizePath(const std::string& path) with the following functionalities:\n            * Removing redundant . components.\n            * Resolving .. components by going up one directory.\n            * Collapsing consecutive slashes (e.g., /// becomes /).\n            * Ensuring the path starts with / but has no trailing / unless it is the root.\n       Example: /a/b/../c/./d// \u2192 /a/c/d\n2. List All Files in a Directory: Implement a function std::vector<std::string> listFilesInDirectory(const std::string& directory) that returns a list of all files directly within a directory (not in subdirectories). It should ignore redundant slashes in the input directory path (normalize it internally). Example: If /a/b/c.txt and /a/b/d.txt exist, listFilesInDirectory(\"/a/b/\") should return [\"/a/b/c.txt\", \"/a/b/d.txt\"].\n3. Validation: Ensure addFilePath rejects invalid normalized paths or paths that conflict with existing ones:\n        * Reject adding /a/b/../c.txt directly\u2014normalize it first.\n        * Reject adding /a/b if /a/b/c.txt exists (file path cannot overlap a directory path).\n"
}