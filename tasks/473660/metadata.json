{
    "time_to_develop_prompt": "20 - 30",
    "programming_language": "C++",
    "task_type": "Bug Fix",
    "difficulty": "3",
    "estimated_skill_requirements": "Language-Specific Features,Knowledge of a Specialized Software Area,Software Engineering Best Practices",
    "user_prompt": "provide your prompt using the following format:\n\nBase Code:\n```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <vector>\n\nclass XMLNode {\npublic:\n    std::string name;\n    std::string value;\n    std::vector<XMLNode*> children;\n\n    XMLNode(const std::string& name, const std::string& value = \"\") : name(name), value(value) {}\n\n    void addChild(XMLNode* child) {      \n        children.push_back(child);\n    }\n};\n\nclass XMLToJSONConverter {\npublic:\n    static std::string convert(XMLNode* node) {\n        // BUG: Doesn't handle invalid XML properly or check for null pointers\n      \n};\n```\n\nPrompt:  Write a complete C++ program that converts a valid XML structure into JSON format while addressing the following issues in the provided base code:\n\nProperly handle null pointers to avoid segmentation faults when the XML tree contains invalid or missing nodes.\nPrevent circular references in the XML tree to ensure the conversion does not result in infinite loops or incorrect JSON structures.\nEnsure the JSON output follows proper formatting rules, avoiding trailing commas and ensuring valid syntax.\nHandle edge cases such as:\nEmpty XML nodes (convert them appropriately into JSON format).\nDuplicate child nodes with the same name or value.\nXML nodes containing attributes or mixed content (text and children).\nReplace raw pointers with smart pointers (std::unique_ptr or std::shared_ptr) to manage memory safely and avoid memory leaks.\nUse robust logic for processing attributes and child nodes, ensuring correct and error-free JSON generation.\nDo not change the class name, function name and its parameter and no `main()` function is not required.\n"
}