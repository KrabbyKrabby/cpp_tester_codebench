{
    "time_to_develop_prompt": "20 - 30",
    "programming_language": "C++",
    "task_type": "Completion",
    "difficulty": "3",
    "estimated_skill_requirements": "Language-Specific Features,Software Engineering Best Practices,Knowledge of a Specialized Software Area",
    "user_prompt": "Base Code:\n```cpp\n#include <iostream>\n#include <vector>\n#include <stdexcept>\n#include <iomanip>\n\nclass Matrix {\nprivate:\n    std::vector<std::vector<int>> data;\n    size_t rows, cols;\n\npublic:\n    // Constructor\n    Matrix(size_t rows, size_t cols) : rows(rows), cols(cols), data(rows, std::vector<int>(cols, 0)) {}\n\n    // Set value at a specific position\n    void setValue(size_t row, size_t col, int value) {\n        if (row >= rows || col >= cols) {\n            throw std::out_of_range(\"Invalid index\");\n        }\n        data[row][col] = value;\n    }\n\n    // Get value at a specific position\n    int getValue(size_t row, size_t col) const {\n        if (row >= rows || col >= cols) {\n            throw std::out_of_range(\"Invalid index\");\n        }\n        return data[row][col];\n    }\n\n    // Multiply two matrices (Incomplete)\n    Matrix multiply(const Matrix& other) const {\n        if (cols != other.rows) {\n            throw std::invalid_argument(\"Matrix dimensions do not align for multiplication.\");\n        }\n\n        // TODO: Implement matrix multiplication\n        return Matrix(rows, other.cols); // Placeholder\n    }\n\n    // Calculate determinant (Incomplete)\n    int determinant() const {\n        if (rows != cols) {\n            throw std::invalid_argument(\"Determinant is only defined for square matrices.\");\n        }\n\n        // TODO: Implement determinant calculation\n        return 0; // Placeholder\n    }\n\n    // Display the matrix\n    void display() const {\n        for (const auto& row : data) {\n            for (const auto& val : row) {\n                std::cout << std::setw(5) << val << \" \";\n            }\n            std::cout << \"\\n\";\n        }\n    }\n};\n```\n\nPrompt:\nThe multiply and determinant methods are incomplete and need to be implemented.\n\n1. Matrix Multiplication:\n- Complete the multiply method to correctly compute the product of two matrices. Ensure the dimensions align for multiplication (cols of the first matrix must equal rows of the second).\n- Handle cases where matrices are too large for computation by throwing an exception (overflow error) if (columns of one matrix)*(rows of another matrix) exceed 10,000.\n\n2. Determinant Calculation:\n- Complete the determinant method for square matrices.\n- Implement the method using recursive Laplace expansion for smaller matrices (size <= 3) and switch to an iterative approach for larger ones.\n\n3. Additional Requirements:\n- Ensure edge cases like zero-sized matrices and invalid dimensions are handled gracefully. It should throw an invalid argument error at such cases.\n- Avoid using third-party libraries; rely only on standard C++ headers.\n- Handle cases where values exceed the integer limits (e.g., `INT_MAX` or `INT_MIN`), as the determinant and multiplication values might exceed the integer limits. It should throw an overflow error when the values exceed integer limits. \n\nGive the complete code."
}