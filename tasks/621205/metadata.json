{
    "time_to_develop_prompt": "> 40",
    "programming_language": "C++",
    "task_type": "Enhancement",
    "difficulty": "3",
    "estimated_skill_requirements": "Software Engineering Best Practices,Data Structure and Algorithms",
    "user_prompt": "provide your prompt using the following format:\n\nBase Code:\n```cpp\n#include <string>\n#include <vector>\nusing namespace std;\n\nint longestUniqueSubstr(string& s) {\n  \n    // if string length is 0\n    if (s.length() == 0)\n        return 0;\n\n    // if string length 1\n    if (s.length() == 1)\n        return 1;\n\n    // if string length is more than 1\n    int maxLength = 0;\n    vector<bool>visited(256, false);\n\n    // left and right pointer of sliding window\n    int left = 0, right = 0;\n    while (right < s.length()) {\n\n        // If the character is repeated, move left pointer \n          // to the right and mark visited characters as false \n        // until the repeating character is no longer part\n          // of the current window.\n        while (visited[s[right]] == true) {\n\n                visited[s[left]] = false;\n                left++;\n           }\n\n        visited[s[right]] = true;\n\n        // The length of the current window (right - left + 1)\n        // is calculated and answer is updated accordingly.\n        maxLength = max(maxLength, (right - left + 1));\n        right++;\n    }\n    return maxLength;\n}\n```\nPrompt:\n\nThe current code is used to find the length of the longest substring without repeating characters in a string. The task is to enhance the code to support character weights, where certain characters contribute more than others to the substring's length.\nFor example, \"abeioub\" and weights {a=2, e=1, i=1, o=1, u=1, b=1} should consider \"abeiou\" as the longest substring with weight 7.  \nAny characters not specified in the weight list are assigned a default weight of 1. Also, ensure case sensitivity and ignore any non-alphanumeric characters. \nAlso, include any needed headers or libraires and use this prototype for the new function `int longestUniqueSubstr(const string& s, unordered_map<char, int>& weights)`\n\nConstraints: \n- 1 \u2264 string.size() \u2264 10^5\n\n\n\n"
}