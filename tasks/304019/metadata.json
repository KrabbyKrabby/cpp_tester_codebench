{
    "time_to_develop_prompt": "20 - 30",
    "programming_language": "C++",
    "task_type": "Completion",
    "difficulty": "3",
    "estimated_skill_requirements": "Language-Specific Features,Software Engineering Best Practices,Data Structure and Algorithms",
    "user_prompt": "Base Code:\n```cpp\n\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nclass PuzzleRay{\npublic:\n\n// Helper function to convert the board into a string representation\nstring boardToString(const vector<vector<int>>& board) {\n    string state;\n    for (const auto& row : board) {\n        for (int cell : row) {\n            state += to_string(cell);\n        }\n    }\n    return state;\n}\n\n\n// Find the position of the zero tile\npair<int, int> findZero(const vector<vector<int>>& board) {\n    // ToDo: Implement findZero function\n    // It should locate the position of the empty space (0) on the board.\n    // Input: board (current state of the puzzle)\n    // Output: pair<int, int> representing the row and column indices of 0.\n}\n\n// Generate possible moves from the current board\nvector<pair<vector<vector<int>>, int>> getNextStates(const vector<vector<int>>& board) {\n    // ToDo: Implement getNextStates function \n}\n\n// Slider Puzzle \nvector<int> slidePuzzle(vector<vector<int>> board) {\n    // ToDo: Implement slidePuzzle function\n}\n\n};\n```\n\nPrompt: Your task is to implement the `slidePuzzle` function along with the `findZero` and `getNextStates` helper functions into class (PuzzleRay class) methods in C++ to solve the slider puzzle problem efficiently. The implementation should use BFS search algorithm to find the minimal sequence of tile movements required to solve the puzzle irrespective of puzzle size. Ensure that the code adheres to the provided base code structure, maintains function signatures and doesn't fail the dedicated test code for it. Do not add a `main()` function. And return the entire code along with your modifications. Ensure the methods are public and thread-safe."
}