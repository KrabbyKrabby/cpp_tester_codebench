{
    "time_to_develop_prompt": "> 40",
    "programming_language": "C++",
    "task_type": "Bug Fix",
    "difficulty": "3",
    "estimated_skill_requirements": "Language-Specific Features,Library Feature",
    "user_prompt": "Base Code:\n```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n\n// Function to find the Longest Common Substring (LCS)\nstd::string SequenceAllignment(const std::string& dna1, const std::string& dna2) {\n    int m = dna1.length();\n    int n = dna2.length();\n    \n    std::vector<std::vector<int>> dp(m + 1, std::vector<int>(n + 1, 0));\n    int maxLength = 0;  \n    int endIndex = 0;  \n\n    for (int i = 1; i <= m; ++i) {\n        for (int j = 1; j <= n; ++j) {\n            if (dna1[i - 1] == dna2[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n                if (dp[i][j] > maxLength) {\n                    maxLength = dp[i][j];\n                    endIndex = i;                 }\n            }\n        }\n    }\n\n    // Extract the longest common subsequence\n    return dna1.substr(endIndex - maxLength, maxLength);\n}\n```\n\nPrompt:\nIn genetics, aligning two DNA sequences helps identify similarities and differences, which is crucial for understanding evolutionary relationships. Given two DNA sequences, I want to find the Longest Common Subsequence (LCS) between them. The present code only finds the longest common substring, it fails to identify the longest common subsequence. Fix the code to find the LCS. Sometimes sequences may contain invalid characters (contain characters other than A, C, G, T). The function should ignore those characters. Also, it is expected that the sequence may contain lower or uppercase. I want the alignment to be case insensitive and the final output to always be in uppercase. \nWhen multiple sequences have the same length, return the LCS that starts first in the traversal of the input `dna1` sequence. Return the one ending first if both sequences begin at the same index.\nReturn the complete function including the necessary imports. Don't provide `int main()` function.\n"
}