{
    "time_to_develop_prompt": "> 40",
    "programming_language": "C++",
    "task_type": "Completion",
    "difficulty": "3",
    "estimated_skill_requirements": "Language-Specific Features,Library Feature",
    "user_prompt": "Base Code:\n# include <iostream>\n# include <vector> \n\nclass LandUsageManager {\nprivate:\n    // Data structure to store allocated ranges\n    std::vector<std::pair<int, int>> allocatedRanges;\n\npublic:\n    // Constructor\n    LandUsageManager();\n\n    // Allocate a range [start, end)\n    void allocateLand(int start, int end);\n\n    // Check if a range [start, end) is fully allocated\n    bool checkAvailability(int start, int end);\n\n    // Release a range [start, end)\n    void releaseLand(int start, int end);\n\n   // Return all individual allocated ranges\n    std::vector<std::pair<int, int>> getIndividualAllocations();\n\n    // Return merged allocation view\n    std::vector<std::pair<int, int>> getMergedAllocations();\n};\n\n\nPrompt:\nI want to complete the implementation of the `LandUsageManger` class for managing the allocation of land parcels for agriculture. I need to implement the following operations:  \n\n- `LandUsageManager()`: Initializes the object for managing land allocations.  \n- `void allocateLand(int start, int end)`: Allocates the land area [start, end) for usage. If the range overlaps with existing allocations, the overlapping portion should be released from the old allocation and reallocated as part of the new range.\n- `boolean checkAvailability(int start, int end)`: Checks if the entire land area [start, end) is free. Returns `true` if the land area is completely available, and `false` otherwise.  \n- `void releaseLand(int start, int end)`: Cancels the allocation for the land area [start, end), freeing up any area in the range that was previously allocated.\n- `std::vector<std::pair<int, int>> getIndividualAllocations()`: This method should return the list of all individual ranges currently allocated without merging overlapping ranges. The intervals must be returned in sorted order based on their start values.\n- `std::vector<std::pair<int, int>> getMergedAllocations()`: This method should return a merged view of the allocations, combining overlapping and adjacent ranges to provide a rough idea of the total land allocated. The intervals must be returned in sorted order based on their start values.\n\nThe land area is represented as half-open intervals, where a half-open interval [start, end) denotes all the land area from start (inclusive) to end (exclusive). Handle edge cases like invalid ranges (`start >= end`); all methods should throw an invalid argument error. Provide the complete implementation of the class, no need to include an example."
}