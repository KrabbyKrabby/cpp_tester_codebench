{
    "time_to_develop_prompt": "30 -40",
    "programming_language": "C++",
    "task_type": "Enhancement",
    "difficulty": "3",
    "estimated_skill_requirements": "Language-Specific Features,Knowledge of a Specialized Software Area",
    "user_prompt": "Base Code:\n```cpp\n#ifndef __AVL_TREE__\n#define __AVL_TREE__\n\n#include <stddef.h>\n#include <stdint.h>\n#include <iostream>\n#include <vector>\n#include <mutex>\n#include <condition_variable>\n#include <algorithm>\n\nclass AVLTree {\npublic:\n    struct AVLNode {\n        uint32_t depth = 0;\n        uint32_t cnt = 0;\n        AVLNode *left = nullptr;\n        AVLNode *right = nullptr;\n        AVLNode *parent = nullptr;\n    };\n\nprivate:\n    static AVLNode *root;\n\n    static uint32_t depth(const AVLNode *node) {\n        return node ? node->depth : 0;\n    }\n\n    static uint32_t cnt(const AVLNode *node) {\n        return node ? node->cnt : 0;\n    }\n\n    static uint32_t max(uint32_t lhs, uint32_t rhs) {\n        return lhs < rhs ? rhs : lhs;\n    }\n\n\npublic:\n\n    static void init(AVLNode *node) {\n        node->depth = 1;\n        node->cnt = 1;\n        node->left = node->right = node->parent = nullptr;\n    }\n\n    static void update(AVLNode *node) {\n        node->depth = 1 + max(depth(node->left), depth(node->right));\n        node->cnt = 1 + cnt(node->left) + cnt(node->right);\n    }\n\n    // Definitions outside the class to avoid clutter\n    static AVLNode *rot_left(AVLNode *node) {\n        // Implement rotation here\n    }\n\n    static AVLNode *rot_right(AVLNode *node) {\n        // Implement rotation here\n    }\n\n    static AVLNode *fix_left(AVLNode *root) {\n        // Implement fix for left-heavy imbalance\n    }\n\n    static AVLNode *fix_right(AVLNode *root) {\n        // Implement fix for right-heavy imbalance\n    }\n\n    static AVLNode *del(AVLNode *node) {\n        // Implement deletion here\n    }\n\n    static AVLNode *fix(AVLNode *node) {\n        while (true) {\n            update(node);\n            uint32_t l = depth(node->left);\n            uint32_t r = depth(node->right);\n            AVLNode **from = NULL;\n            if (node->parent) {\n                from = (node->parent->left == node)\n                    ? &node->parent->left : &node->parent->right;\n            }\n            if (l == r + 2) {\n                node = fix_left(node);\n            } else if (l + 2 == r) {\n                node = fix_right(node);\n            }\n            if (!from) {\n                return node;\n            }\n            *from = node;\n            node = node->parent;\n        }\n    }\n};\n\n#endif //__AVL_TREE__\n```\n \nPrompt: \nEnhance the AVLTree class by implementing the rotation and deletion operations for an AVL tree in C++. Complete the implementation of the rotation (rot_left, rot_right), balancing (fix_left, fix_right), and deletion (del) methods. Return the entire code along with your modifications. Don't include the `main` function."
}