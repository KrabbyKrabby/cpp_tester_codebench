{
    "time_to_develop_prompt": "30 -40",
    "programming_language": "C++",
    "task_type": "Bug Fix",
    "difficulty": "3",
    "estimated_skill_requirements": "Language-Specific Features,Library Feature,Software Engineering Best Practices",
    "user_prompt": "provide your prompt using the following format:\n\nBase Code:\n``cpp\n#include <iostream>\n#include <string>\n#include <vector>\n\nclass XMLNode {\npublic:\n    std::string name;\n    std::string value;\n    std::vector<XMLNode*> children;\n\n    XMLNode(const std::string& name, const std::string& value = \"\") : name(name), value(value) {}\n\n    void addChild(XMLNode* child) {\n        // BUG: Allows adding the same child multiple times\n        children.push_back(child);\n    }\n};\n\nclass XMLValidator {\npublic:\n    static bool isValid(XMLNode* node) {\n        // BUG: Doesn't validate node name properly (e.g., empty name is allowed)\n        if (node->name.empty()) {\n            return true; // Incorrect logic\n        }\n\n        for (XMLNode* child : node->children) {\n            if (!isValid(child)) {\n                return false;\n            }\n        }\n\n        // BUG: Doesn't check for other XML rules like invalid characters in names\n        return true;\n    }\n};\n```\n\nPrompt: \nI created buggy C++ code to create and validate XML nodes. I need the corrected C++ code to implement XML node creation and validation using the following constraints:\n\n1. Class and Function Signatures:  \n   - Keep the class names (`XMLNode` and `XMLValidator`) and function signatures (`addChild` and `isValid`) as provided. Do not rename or alter their parameters.\n\n2. Expected Behavior:  \n   - The code must fulfill the following functionality:\n     - Allow adding child nodes to a parent node and support validation of the XML tree structure.\n     - Throw a `std::invalid_argument` exception when attempting to create a node with an invalid name.  \n       - Invalid names include empty strings or strings containing characters other than letters, digits, underscores (`_`), dots (`.`), and hyphens (`-`).  \n       - Node names must start with a letter or an underscore.\n     - Throw a `std::runtime_error` exception when attempting to add a duplicate child node (same name and value) to a parent node.\n     - Properly handle deeply nested XML node structures.\n     - Allow valid nodes without children or values.\n\n3. Implementation Constraints:  \n   - Use raw pointers (no smart pointers).\n   - Ensure there is no memory leak in typical use cases, but the implementation can exhibit subtle issues with cleanup (e.g., missing cleanup in specific edge cases).\n   - Don't use `std::regex` to validate node names."
}